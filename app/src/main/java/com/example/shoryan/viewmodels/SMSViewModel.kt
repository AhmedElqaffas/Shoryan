package com.example.shoryan.viewmodels

import android.os.CountDownTimer
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.shoryan.data.*
import com.example.shoryan.networking.RetrofitBloodDonationInterface
import kotlinx.coroutines.Job
import javax.inject.Inject
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

class SMSViewModel @Inject constructor (private val bloodDonationAPI: RetrofitBloodDonationInterface) : ViewModel() {
    companion object OperationType{
        const val LOGIN = 1
        const val REGISTERATION = 2
    }

    private var loginJob: Job? = null

    private var lastCodeSendTime: Long = 0L
    private var timer: CountDownTimer? = null

    // A mechanism to push events to the fragment
    private val _eventsFlow = MutableSharedFlow<ServerError?>()
    val eventsFlow = _eventsFlow.asSharedFlow()

    private val  _canResendSMS = MutableStateFlow(true)
    val canResendSMS: StateFlow<Boolean> = _canResendSMS

    private val _remainingTime = MutableStateFlow(0L)

    val remainingTimeString: Flow<String> = _remainingTime.transform{
        val seconds = if(it < 10_000) "0${it / 1000}" else it / 1000
        emit("00:$seconds")
    }

    private val  _isVerifyingCode = MutableStateFlow(false)
    val isVerifyingCode: StateFlow<Boolean> = _isVerifyingCode

    // If null, then no successful login has happened yet
    // If logging in is successful, then this variable will contain the tokens generated by server
    private val _hasSuccessfullyLoggedIn = MutableStateFlow<Tokens?>(null)
    val hasSuccessfullyLoggedIn: StateFlow<Tokens?> = _hasSuccessfullyLoggedIn


    fun trySendCode(phoneNumber: String, operationType: Int){
        if(_canResendSMS.value == true){
            viewModelScope.launch{
                sendCode(phoneNumber, operationType)
            }
        }
    }

    private suspend fun sendCode(phoneNumber: String, operationType: Int){
        _canResendSMS.emit(false)
        try{
            when(operationType){
                LOGIN -> sendLoginCode(phoneNumber)
            }
        }catch(e: Exception){
            _canResendSMS.emit(true)
            _eventsFlow.emit(ServerError.CONNECTION_ERROR)
        }
    }

    private suspend fun sendLoginCode(phoneNumber: String){
        val response = bloodDonationAPI.sendSMSLogin(SMSCodeQuery(phoneNumber))
        if(response.error == null){
            lastCodeSendTime = System.currentTimeMillis()
            startTimer()
        }
        else{
            _canResendSMS.emit(true)
            _eventsFlow.emit(response.error.message)
        }
    }

    /**
     * A timer that counts how much time is remaining for the user to be able to resend sms.
     */
    private fun startTimer(){
        timer = object: CountDownTimer(30_000, 500){
            override fun onTick(millisUntilFinished: Long) {
                viewModelScope.launch {
                    _remainingTime.emit(millisUntilFinished)
                }
            }
            override fun onFinish(){
                viewModelScope.launch{
                    _remainingTime.emit(0L)
                    _canResendSMS.emit(true)
                }
            }
        }.start()
    }

    fun verifyCode(phoneNumber: String, code: String, operationType: Int){
        loginJob = viewModelScope.launch{
            _isVerifyingCode.emit(true)
            try{
                when(operationType){
                    LOGIN -> verifyLoginCode(phoneNumber, code)
                }
                _isVerifyingCode.emit(false)
            }catch(e: Exception){
                _isVerifyingCode.emit(false)
                _eventsFlow.emit(ServerError.CONNECTION_ERROR)
            }
        }
    }

    private suspend fun verifyLoginCode(phoneNumber: String, code: String){
        val serverQuery = LoginCodeQuery(phoneNumber, code)
        val response = bloodDonationAPI.verifyLoginCode(serverQuery)
        _eventsFlow.emit(response.error?.message)
        if(response.accessToken != null){
            _hasSuccessfullyLoggedIn.emit(Tokens(response.accessToken, response.refreshToken!!))
        }
    }

    fun stopLogin(){
        loginJob?.cancel()
    }

    fun clearReceivedEvent(){
        viewModelScope.launch{
            _eventsFlow.emit(null)
        }
    }
}